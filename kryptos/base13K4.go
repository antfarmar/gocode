package main

import (
	"fmt"
	"strconv"
	"strings"
)

// TRIDECIMAL = BASE13
var k4 = []string{"11", "01", "0a", "14", "17", "11", "1a", "11", "06", "07", "17", "0b", "01", "15", "11", "0b", "08", "05", "01", "01", "19", "05", "0b", "14", "18", "13", "13", "12", "14", "10", "06", "0a", "15", "15", "11", "16", "19", "16", "13", "15", "09", "13", "15", "15", "04", "0a", "1c", "1c", "19", "00", "16", "09", "0a", "0b", "17", "03", "08", "00", "19", "08", "10", "05", "01", "10", "1b", "12", "18", "16", "16", "0c", "1c", "05", "12", "0a", "19", "06", "03", "0a", "1c", "1a", "16", "09", "02", "03", "08", "06", "0a", "17", "07", "17", "00", "17", "04", "0a", "02", "00", "14"}
var k4str = []string{"O", "B", "K", "R", "U", "O", "X", "O", "G", "H", "U", "L", "B", "S", "O", "L", "I", "F", "B", "B", "W", "F", "L", "R", "V", "Q", "Q", "P", "R", "N", "G", "K", "S", "S", "O", "T", "W", "T", "Q", "S", "J", "Q", "S", "S", "E", "K", "Z", "Z", "W", "A", "T", "J", "K", "L", "U", "D", "I", "A", "W", "I", "N", "F", "B", "N", "Y", "P", "V", "T", "T", "M", "Z", "F", "P", "K", "W", "G", "D", "K", "Z", "X", "T", "J", "C", "D", "I", "G", "K", "U", "H", "U", "A", "U", "E", "K", "C", "A", "R"}
var kry26 = []string{"K", "R", "Y", "P", "T", "O", "S", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "L", "M", "N", "Q", "U", "V", "W", "X", "Z"}
var abc26 = []string{"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"}
var size int = len(k4)

func pos(input []string, value string) int {
	for p, v := range input {
		if v == value {
			return p
		}
	}
	return -1
}

func split() ([]string, []string) {
	var a, b []string
	for _, n := range k4 {
		s := strings.Split(n, "")
		a = append(a, s[0])
		b = append(b, s[1])
	}
	return a, b
}

func tpose(input []string, a, b int) []string {
	output := make([]string, len(input))
	m := len(input)
	for x := range output {
		output[x] = input[(a*x+b)%m]
	}
	return output
}

func toString(a, b, alph []string) string {
	s := make([]string, size)
	for i := 0; i < len(a); i++ {
		c := a[i] + b[i]
		n, _ := strconv.ParseInt(c, 13, 0)
		//s[i] = string('A' + n)
		s[i] = alph[pos(abc26, string('A'+n))]
	}
	return strings.Join(s, "")
}

func rot1(r rune) rune {
	return 'A' + (r-'A'+1)%26
}

func main() {
	x, y := split()

	alph := abc26
	word := "UBTLE"
	cnt := 1

	for h := 0; h < size; h++ {
		for i := 1; i < size; i++ { // TRANSPOSE HIGH BITS
			tx := tpose(x, i, 0)
			for j := 1; j < size; j++ { // TRANSPOSE LOW BITS
				ty := tpose(y, j, h)
				res := toString(tx, ty, alph)
				for k := 0; k < 26; k++ { // CAESAR SHIFT
					if strings.Count(res, word) >= cnt {
						tmp := strings.Replace(res, word, " ["+word+"] ", -1)
						fmt.Println(tmp, h, i, j, k)
					}
					res = strings.Map(rot1, res)
				}
			}
		}
	}
}

//LOOK,TUT,ONWHOW,TURNARAFT,EAST,FIGUR,SHIFT,SWISS, KRONA,CENT,LEFT,SNOW,SUNS,GLOAT,POSS
//KNOW,MOUSE,BREAD,MOST,MARK,FAIR,TIME,SMOKE,COPS,DISK,KEY,MODE,FOX,SUN,DAY,CUT,NOT
//SKYBOX,SOUP,RISK,LOOK WHOJSNOW WARS,YOUKDOIT SOBALL, NOWASK, WATER, THIRDGOD
//
//BETWEEEM 12/25, UBTLE, SHADIMG 0/13, ANDTHDA 6/19, ABSEN 0/13, OFLIHG 12/25, LIESTHE 3/16, IQLUS 11/24
/*
QWKXSWIFSCUJMPBCYXTBNKYDTXLWJENDJHJOUSFMNVTDBXNQBQYNOXSODXMOFVTBJVRFMXXRUGHTSHIFTCENTHTICLGNUBEME 26 25


OVFWYTRYXMNXNOGMOMCSAXFXKBREADEYPSIGUHDSWJNHQQNXUTIWVCUOEFDFUKLQHZKOFGYMGUWJXGIROTJGDKBOTVPOFFNCJ 20 16

ONWHOWKUDGRENXOMQGGINCVGSZTOWPCQQVIXJKGLXDHDYEXOOAEIYCBFCUSOHRKWSSSEFSAYJTODZKKNHFGXYWZOGIHWNMHSG 5 29
ONWHOJKUDGERNXOZQTTINPIGFMGOJPPDDIVXWKGLXQHQLEKOOAEILCOFCUFOHEXJFSSRSSNYJGBQMKXAUSTXLJMOTVUWAMUST 60 29

OQXZBSVTOWVRFZKKRUGHTSHIFTPRAGHGVPYTNHBEZRDWXXFWVFSCHWZPBCLKTBAXLDGKLWWRNDWUJBHFSMNITQBXADODYAOKF 13 26
OQKZOSIGOJVEFZKKRUTHTFUISTCRAGUGICLTNUBEZRQJKXSWISSPUWZPBPLXGONKLQTKLWWRNDJUWBHFSMAVTDOKADBQYABKF 26 26
OQXZBFITBWIRSMKXRHTHTSHVSTCENTUGIPYTNHORMRDWXKSWVSSCHJMCOPLXGBAXLQGXYWWEAQJHWBUSFMAVGDBKNDBDYNBKS 39 26
ODXMOSIGOWVRSMKXEHTHTSHVFTPRAGHTIPLTNHOEZEQWKKSJISSPHJMPBPLKGONKLDTXLWJRNQWUWOUSFZAVTDOKADODLAOKF 52 26
ODKMBFVTOWIESZXKRUGUGSHIFTPENGUTVPLGNHOEMRDWXKSWIFFCHJMPOPYXGOAXLQTKLWWENDWHJOUFFZNVTQOKADBQYNOKF 53 26
ODXZBFVTOJVEFMXKRUTUTSHIFTCRNGHGVPLGNHORZEQJXXFJIFSPHJZPOCYKTONKYDGKYWJEADWUJBUSFZNVTDBKAQOQLNOKF 88 26

OZRQHWPXXQPSGVBLNXKBZXFHGQSZCKLGSNOWOLKJPSHQVSKRWEZBLSVTHEAARAFTBGAGIZOPOAUQHGEKUJXGWTDQFJVLSHVBJ 13 46
OZRDHJPXXQPFGIBYAXXBZKFHTDFZCKLTFNOWBLKWPSHDVSKRWRMBYFVTURANEASTBGNGIZOCOAHDHTRKHWXTWGQDFWVLSUVBW 23 46
OZEQUWCKXDPFGVBLNXXBZKSHTQFZCKYGFABWOYKJPSUDISXRJRZOYSVTHRANENSGBTNGIZOPOAHQUGEKUJKTWGQDFJIYSHIBJ 26 46
OZEQUWCXXDCSGVOYNKKOZKFHGQFZPKLTFAOWBLXJPSUQISKEWRZBYSIGURNAEASTOGNGIMOCBNHDHTEXUJXGJGDQSWVYFHIOW 74 46
OMEDHJCKKDCFTVOYNXXOMXFHTQSMPXLGSNOWBLXJCSUQIFKRJEZOYFIGURANRASGOTNTIZBPONHQUGEKHJXGJTQQSWIYSHVBJ 75 46
OZEQHWPXKQCFTVOLNXXOZKFHGQFMCKLTSNOWOLKJCFUDISXEWEMOLFVTHEANRAFGOTAGVMBPBNUQHTEKHWKTWTQQFWVYSHIOW 87 46
OZEDUJCXXQCFGIBYNXXOZXFUGQFMPKLTSNBJOLKJPSHDVSXEWEMBLFIGURANRAFTOGNTVMBPOAUQHTEXUJXGWTDQSWIYFUVBJ 89 46
OMRDHJPKKQPSGVBLAXXBZXFUTDFMPXYTFABWBLXJPFUQIFKEWRMOYSVTURNARAFTBTAGVMBPBNHQUTEXHWKTWTQDSWILFHIOW 94 46
CEXEWJCMLFWZITLQNFARKVEENWHNLIESTHEVUIKQVATDBHFGBMKSEPIYALIEWMVXOWXWOTHPVBJZNXMPZDDMXAAGDWGRYQWHA 1 46 70 16
PRKEJJPZYFJZVGLQASAEXIEEAJHALIESTHEIUIXQIATQOUFGBZKSECILALIEWZVKOWKWBTUPVBJZNXMCMDDZXNAGQJGRYDWHN 38 46 70 16

OLHOOSCGJUKBHHAOPRJGAMKDLYJXNPQUZEVOPSJGDFRJHNSVLTKIJKABJOTEQSTQPTKVYGVKSXSAWBNVZQMOUSEXGFSMQKTUE 95 53
OFKBALDOQNXOQTVNMFSHOWHWQAEWJLKTQYKNOTXLCOCZWHPFFIWFXKWQEMROUNGLPITHGAECTFVHSTUTHEKKZFEVWBGVSOMXQ 90 71
OIFJXFBKNXLWDDBEQMARKOOUDAGGVYACMVSGFUHTBNWRUCJTQFAIRHWFWTLHXTGUQRYXXXNMOSTRKIYJPBOGPVZFJOUZCXFQF 15 84
*/
